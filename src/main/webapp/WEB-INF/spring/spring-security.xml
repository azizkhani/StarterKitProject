<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<http auto-config="true" >
		<intercept-url pattern="/login.jsp*" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
		<intercept-url pattern="/Content/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
    	<intercept-url pattern="/**" access="ROLE_USER"  />
		<form-login login-page="/login.jsp" default-target-url="/Index.jsp" authentication-failure-url="/login.jsp?error=true" />
		<logout logout-success-url="/login.jsp" />
		<!--Remember-me or persistent-login authentication refers to web sites 
			being able to remember the identity of a principal between sessions -->
		<remember-me key="myAppKey" />
		<!-- Session Management: Spring Security -->
		<!-- Session Management: invalid-session-url="/sessionTimeout.htm" Detecting 
			Timeouts -->
		<!-- Session Management: session-fixation-protection="newSession" Session 
			Fixation Attack Protection migrateSession - creates a new session and copies 
			the existing session attributes to the new session. This is the default. 
			none - Don't do anything. The original session will be retained. newSession 
			- Create a new "clean" session, without copying the existing session data. -->
		<!-- Session Management: max-sessions="1" This will prevent a user from 
			logging in multiple times - a second login will cause the first to be invalidated. 
			Often you would prefer to prevent a second login, in which case you can use -->
		<!-- Session Management: error-if-maximum-exceeded="true" The second login 
			will then be rejected by Error Code 
		<session-management invalid-session-url="/ordermanagement.htm">
			<concurrency-control max-sessions="20" error-if-maximum-exceeded="true" />
		</session-management>
		<access-denied-handler ref="accessDeniedHandler"/>-->
	</http>
	<global-method-security  pre-post-annotations="enabled" secured-annotations="enabled" proxy-target-class="true" />
	
	<beans:bean id="userDetailsService" class="org.baharan.service.security.BaharUserDetailsService">
	</beans:bean>

	<beans:bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<beans:property name="userDetailsService" ref="userDetailsService" />
	</beans:bean>

	<beans:bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager">
		<beans:property name="providers">
			<beans:list>
				<beans:ref local="daoAuthenticationProvider" />
			</beans:list>
		</beans:property>
	</beans:bean>

	<authentication-manager>
		<authentication-provider user-service-ref="userDetailsService">
			<!-- password-encoder hash="sha-256"/> -->
		</authentication-provider>
	</authentication-manager>
</beans:beans>